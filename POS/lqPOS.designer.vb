'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="POS")>  _
Partial Public Class lqPOSDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InserttblCategory(instance As tblCategory)
    End Sub
  Partial Private Sub UpdatetblCategory(instance As tblCategory)
    End Sub
  Partial Private Sub DeletetblCategory(instance As tblCategory)
    End Sub
  Partial Private Sub InserttblUser(instance As tblUser)
    End Sub
  Partial Private Sub UpdatetblUser(instance As tblUser)
    End Sub
  Partial Private Sub DeletetblUser(instance As tblUser)
    End Sub
  Partial Private Sub InserttblAdmin(instance As tblAdmin)
    End Sub
  Partial Private Sub UpdatetblAdmin(instance As tblAdmin)
    End Sub
  Partial Private Sub DeletetblAdmin(instance As tblAdmin)
    End Sub
  Partial Private Sub InserttblCustomer(instance As tblCustomer)
    End Sub
  Partial Private Sub UpdatetblCustomer(instance As tblCustomer)
    End Sub
  Partial Private Sub DeletetblCustomer(instance As tblCustomer)
    End Sub
  Partial Private Sub InserttblItem(instance As tblItem)
    End Sub
  Partial Private Sub UpdatetblItem(instance As tblItem)
    End Sub
  Partial Private Sub DeletetblItem(instance As tblItem)
    End Sub
  Partial Private Sub InserttblIngredient(instance As tblIngredient)
    End Sub
  Partial Private Sub UpdatetblIngredient(instance As tblIngredient)
    End Sub
  Partial Private Sub DeletetblIngredient(instance As tblIngredient)
    End Sub
  Partial Private Sub InserttblItem_Ing(instance As tblItem_Ing)
    End Sub
  Partial Private Sub UpdatetblItem_Ing(instance As tblItem_Ing)
    End Sub
  Partial Private Sub DeletetblItem_Ing(instance As tblItem_Ing)
    End Sub
  Partial Private Sub InserttblOrder_Ing(instance As tblOrder_Ing)
    End Sub
  Partial Private Sub UpdatetblOrder_Ing(instance As tblOrder_Ing)
    End Sub
  Partial Private Sub DeletetblOrder_Ing(instance As tblOrder_Ing)
    End Sub
  Partial Private Sub InserttblInvoice(instance As tblInvoice)
    End Sub
  Partial Private Sub UpdatetblInvoice(instance As tblInvoice)
    End Sub
  Partial Private Sub DeletetblInvoice(instance As tblInvoice)
    End Sub
  Partial Private Sub InserttblOrder(instance As tblOrder)
    End Sub
  Partial Private Sub UpdatetblOrder(instance As tblOrder)
    End Sub
  Partial Private Sub DeletetblOrder(instance As tblOrder)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.POS.My.MySettings.Default.POSConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property tblCategories() As System.Data.Linq.Table(Of tblCategory)
		Get
			Return Me.GetTable(Of tblCategory)
		End Get
	End Property
	
	Public ReadOnly Property tblUsers() As System.Data.Linq.Table(Of tblUser)
		Get
			Return Me.GetTable(Of tblUser)
		End Get
	End Property
	
	Public ReadOnly Property tblAdmins() As System.Data.Linq.Table(Of tblAdmin)
		Get
			Return Me.GetTable(Of tblAdmin)
		End Get
	End Property
	
	Public ReadOnly Property tblCustomers() As System.Data.Linq.Table(Of tblCustomer)
		Get
			Return Me.GetTable(Of tblCustomer)
		End Get
	End Property
	
	Public ReadOnly Property tblItems() As System.Data.Linq.Table(Of tblItem)
		Get
			Return Me.GetTable(Of tblItem)
		End Get
	End Property
	
	Public ReadOnly Property tblIngredients() As System.Data.Linq.Table(Of tblIngredient)
		Get
			Return Me.GetTable(Of tblIngredient)
		End Get
	End Property
	
	Public ReadOnly Property tblItem_Ings() As System.Data.Linq.Table(Of tblItem_Ing)
		Get
			Return Me.GetTable(Of tblItem_Ing)
		End Get
	End Property
	
	Public ReadOnly Property tblOrder_Ings() As System.Data.Linq.Table(Of tblOrder_Ing)
		Get
			Return Me.GetTable(Of tblOrder_Ing)
		End Get
	End Property
	
	Public ReadOnly Property tblInvoices() As System.Data.Linq.Table(Of tblInvoice)
		Get
			Return Me.GetTable(Of tblInvoice)
		End Get
	End Property
	
	Public ReadOnly Property tblOrders() As System.Data.Linq.Table(Of tblOrder)
		Get
			Return Me.GetTable(Of tblOrder)
		End Get
	End Property
	
	Public ReadOnly Property View_orderItems() As System.Data.Linq.Table(Of View_orderItem)
		Get
			Return Me.GetTable(Of View_orderItem)
		End Get
	End Property
	
	Public ReadOnly Property View_OrderInvoiceItems() As System.Data.Linq.Table(Of View_OrderInvoiceItem)
		Get
			Return Me.GetTable(Of View_OrderInvoiceItem)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Filter_Customer")>  _
	Public Function Filter_Customer(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal customer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal address As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal phone As String) As ISingleResult(Of Filter_CustomerResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), customer, address, phone)
		Return CType(result.ReturnValue,ISingleResult(Of Filter_CustomerResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Filter_User")>  _
	Public Function Filter_User(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal user As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal password As String) As ISingleResult(Of Filter_UserResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), user, password)
		Return CType(result.ReturnValue,ISingleResult(Of Filter_UserResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Filter_item")>  _
	Public Function Filter_item(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CategoryId", DbType:="Int")> ByVal categoryId As System.Nullable(Of Integer)) As ISingleResult(Of Filter_itemResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), name, categoryId)
		Return CType(result.ReturnValue,ISingleResult(Of Filter_itemResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Filter_itemIng")>  _
	Public Function Filter_itemIng(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Itemid", DbType:="Int")> ByVal itemid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Ingid", DbType:="Int")> ByVal ingid As System.Nullable(Of Integer)) As ISingleResult(Of Filter_itemIngResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), itemid, ingid)
		Return CType(result.ReturnValue,ISingleResult(Of Filter_itemIngResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Filter_ReprotIemOrder")>  _
	Public Function Filter_ReprotIemOrder(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal itemName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="OpenClose", DbType:="Bit")> ByVal openClose As System.Nullable(Of Boolean)) As ISingleResult(Of Filter_ReprotIemOrderResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), itemName, openClose)
		Return CType(result.ReturnValue,ISingleResult(Of Filter_ReprotIemOrderResult))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCategory")>  _
Partial Public Class tblCategory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _CategoryName As String
	
	Private _tblItems As EntitySet(Of tblItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnCategoryNameChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblItems = New EntitySet(Of tblItem)(AddressOf Me.attach_tblItems, AddressOf Me.detach_tblItems)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryName", DbType:="NVarChar(100)")>  _
	Public Property CategoryName() As String
		Get
			Return Me._CategoryName
		End Get
		Set
			If (String.Equals(Me._CategoryName, value) = false) Then
				Me.OnCategoryNameChanging(value)
				Me.SendPropertyChanging
				Me._CategoryName = value
				Me.SendPropertyChanged("CategoryName")
				Me.OnCategoryNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblCategory_tblItem", Storage:="_tblItems", ThisKey:="id", OtherKey:="CategoryId")>  _
	Public Property tblItems() As EntitySet(Of tblItem)
		Get
			Return Me._tblItems
		End Get
		Set
			Me._tblItems.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblItems(ByVal entity As tblItem)
		Me.SendPropertyChanging
		entity.tblCategory = Me
	End Sub
	
	Private Sub detach_tblItems(ByVal entity As tblItem)
		Me.SendPropertyChanging
		entity.tblCategory = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblUser")>  _
Partial Public Class tblUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Name As String
	
	Private _Password As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NVarChar(50)")>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAdmin")>  _
Partial Public Class tblAdmin
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _AdminName As String
	
	Private _AdminPassword As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnAdminNameChanging(value As String)
    End Sub
    Partial Private Sub OnAdminNameChanged()
    End Sub
    Partial Private Sub OnAdminPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnAdminPasswordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AdminName", DbType:="NVarChar(50)")>  _
	Public Property AdminName() As String
		Get
			Return Me._AdminName
		End Get
		Set
			If (String.Equals(Me._AdminName, value) = false) Then
				Me.OnAdminNameChanging(value)
				Me.SendPropertyChanging
				Me._AdminName = value
				Me.SendPropertyChanged("AdminName")
				Me.OnAdminNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AdminPassword", DbType:="NVarChar(50)")>  _
	Public Property AdminPassword() As String
		Get
			Return Me._AdminPassword
		End Get
		Set
			If (String.Equals(Me._AdminPassword, value) = false) Then
				Me.OnAdminPasswordChanging(value)
				Me.SendPropertyChanging
				Me._AdminPassword = value
				Me.SendPropertyChanged("AdminPassword")
				Me.OnAdminPasswordChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCustomer")>  _
Partial Public Class tblCustomer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Customer As String
	
	Private _Address As String
	
	Private _Phone As String
	
	Private _tblInvoices As EntitySet(Of tblInvoice)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnCustomerChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblInvoices = New EntitySet(Of tblInvoice)(AddressOf Me.attach_tblInvoices, AddressOf Me.detach_tblInvoices)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="NVarChar(50)")>  _
	Public Property Customer() As String
		Get
			Return Me._Customer
		End Get
		Set
			If (String.Equals(Me._Customer, value) = false) Then
				Me.OnCustomerChanging(value)
				Me.SendPropertyChanging
				Me._Customer = value
				Me.SendPropertyChanged("Customer")
				Me.OnCustomerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(50)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblCustomer_tblInvoice", Storage:="_tblInvoices", ThisKey:="id", OtherKey:="customerId")>  _
	Public Property tblInvoices() As EntitySet(Of tblInvoice)
		Get
			Return Me._tblInvoices
		End Get
		Set
			Me._tblInvoices.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblInvoices(ByVal entity As tblInvoice)
		Me.SendPropertyChanging
		entity.tblCustomer = Me
	End Sub
	
	Private Sub detach_tblInvoices(ByVal entity As tblInvoice)
		Me.SendPropertyChanging
		entity.tblCustomer = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblItems")>  _
Partial Public Class tblItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _ItemName As String
	
	Private _CategoryId As System.Nullable(Of Integer)
	
	Private _Price As System.Nullable(Of Integer)
	
	Private _tblItem_Ings As EntitySet(Of tblItem_Ing)
	
	Private _tblOrders As EntitySet(Of tblOrder)
	
	Private _tblCategory As EntityRef(Of tblCategory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnItemNameChanging(value As String)
    End Sub
    Partial Private Sub OnItemNameChanged()
    End Sub
    Partial Private Sub OnCategoryIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCategoryIdChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblItem_Ings = New EntitySet(Of tblItem_Ing)(AddressOf Me.attach_tblItem_Ings, AddressOf Me.detach_tblItem_Ings)
		Me._tblOrders = New EntitySet(Of tblOrder)(AddressOf Me.attach_tblOrders, AddressOf Me.detach_tblOrders)
		Me._tblCategory = CType(Nothing, EntityRef(Of tblCategory))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemName", DbType:="NVarChar(50)")>  _
	Public Property ItemName() As String
		Get
			Return Me._ItemName
		End Get
		Set
			If (String.Equals(Me._ItemName, value) = false) Then
				Me.OnItemNameChanging(value)
				Me.SendPropertyChanging
				Me._ItemName = value
				Me.SendPropertyChanged("ItemName")
				Me.OnItemNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryId", DbType:="Int")>  _
	Public Property CategoryId() As System.Nullable(Of Integer)
		Get
			Return Me._CategoryId
		End Get
		Set
			If (Me._CategoryId.Equals(value) = false) Then
				If Me._tblCategory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._CategoryId = value
				Me.SendPropertyChanged("CategoryId")
				Me.OnCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Int")>  _
	Public Property Price() As System.Nullable(Of Integer)
		Get
			Return Me._Price
		End Get
		Set
			If (Me._Price.Equals(value) = false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblItem_tblItem_Ing", Storage:="_tblItem_Ings", ThisKey:="id", OtherKey:="ItemId")>  _
	Public Property tblItem_Ings() As EntitySet(Of tblItem_Ing)
		Get
			Return Me._tblItem_Ings
		End Get
		Set
			Me._tblItem_Ings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblItem_tblOrder", Storage:="_tblOrders", ThisKey:="id", OtherKey:="itemId")>  _
	Public Property tblOrders() As EntitySet(Of tblOrder)
		Get
			Return Me._tblOrders
		End Get
		Set
			Me._tblOrders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblCategory_tblItem", Storage:="_tblCategory", ThisKey:="CategoryId", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property tblCategory() As tblCategory
		Get
			Return Me._tblCategory.Entity
		End Get
		Set
			Dim previousValue As tblCategory = Me._tblCategory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblCategory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblCategory.Entity = Nothing
					previousValue.tblItems.Remove(Me)
				End If
				Me._tblCategory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblItems.Add(Me)
					Me._CategoryId = value.id
				Else
					Me._CategoryId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblCategory")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblItem_Ings(ByVal entity As tblItem_Ing)
		Me.SendPropertyChanging
		entity.tblItem = Me
	End Sub
	
	Private Sub detach_tblItem_Ings(ByVal entity As tblItem_Ing)
		Me.SendPropertyChanging
		entity.tblItem = Nothing
	End Sub
	
	Private Sub attach_tblOrders(ByVal entity As tblOrder)
		Me.SendPropertyChanging
		entity.tblItem = Me
	End Sub
	
	Private Sub detach_tblOrders(ByVal entity As tblOrder)
		Me.SendPropertyChanging
		entity.tblItem = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblIngredient")>  _
Partial Public Class tblIngredient
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _IngredientName As String
	
	Private _IngredientPrice As System.Nullable(Of Integer)
	
	Private _tblItem_Ings As EntitySet(Of tblItem_Ing)
	
	Private _tblOrder_Ings As EntitySet(Of tblOrder_Ing)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnIngredientNameChanging(value As String)
    End Sub
    Partial Private Sub OnIngredientNameChanged()
    End Sub
    Partial Private Sub OnIngredientPriceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIngredientPriceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblItem_Ings = New EntitySet(Of tblItem_Ing)(AddressOf Me.attach_tblItem_Ings, AddressOf Me.detach_tblItem_Ings)
		Me._tblOrder_Ings = New EntitySet(Of tblOrder_Ing)(AddressOf Me.attach_tblOrder_Ings, AddressOf Me.detach_tblOrder_Ings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IngredientName", DbType:="NVarChar(50)")>  _
	Public Property IngredientName() As String
		Get
			Return Me._IngredientName
		End Get
		Set
			If (String.Equals(Me._IngredientName, value) = false) Then
				Me.OnIngredientNameChanging(value)
				Me.SendPropertyChanging
				Me._IngredientName = value
				Me.SendPropertyChanged("IngredientName")
				Me.OnIngredientNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IngredientPrice", DbType:="Int")>  _
	Public Property IngredientPrice() As System.Nullable(Of Integer)
		Get
			Return Me._IngredientPrice
		End Get
		Set
			If (Me._IngredientPrice.Equals(value) = false) Then
				Me.OnIngredientPriceChanging(value)
				Me.SendPropertyChanging
				Me._IngredientPrice = value
				Me.SendPropertyChanged("IngredientPrice")
				Me.OnIngredientPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblIngredient_tblItem_Ing", Storage:="_tblItem_Ings", ThisKey:="id", OtherKey:="IngId")>  _
	Public Property tblItem_Ings() As EntitySet(Of tblItem_Ing)
		Get
			Return Me._tblItem_Ings
		End Get
		Set
			Me._tblItem_Ings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblIngredient_tblOrder_Ing", Storage:="_tblOrder_Ings", ThisKey:="id", OtherKey:="ingId")>  _
	Public Property tblOrder_Ings() As EntitySet(Of tblOrder_Ing)
		Get
			Return Me._tblOrder_Ings
		End Get
		Set
			Me._tblOrder_Ings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblItem_Ings(ByVal entity As tblItem_Ing)
		Me.SendPropertyChanging
		entity.tblIngredient = Me
	End Sub
	
	Private Sub detach_tblItem_Ings(ByVal entity As tblItem_Ing)
		Me.SendPropertyChanging
		entity.tblIngredient = Nothing
	End Sub
	
	Private Sub attach_tblOrder_Ings(ByVal entity As tblOrder_Ing)
		Me.SendPropertyChanging
		entity.tblIngredient = Me
	End Sub
	
	Private Sub detach_tblOrder_Ings(ByVal entity As tblOrder_Ing)
		Me.SendPropertyChanging
		entity.tblIngredient = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[tblItem-Ing]")>  _
Partial Public Class tblItem_Ing
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _ItemId As System.Nullable(Of Integer)
	
	Private _IngId As System.Nullable(Of Integer)
	
	Private _tblItem As EntityRef(Of tblItem)
	
	Private _tblIngredient As EntityRef(Of tblIngredient)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnItemIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemIdChanged()
    End Sub
    Partial Private Sub OnIngIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIngIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblItem = CType(Nothing, EntityRef(Of tblItem))
		Me._tblIngredient = CType(Nothing, EntityRef(Of tblIngredient))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemId", DbType:="Int")>  _
	Public Property ItemId() As System.Nullable(Of Integer)
		Get
			Return Me._ItemId
		End Get
		Set
			If (Me._ItemId.Equals(value) = false) Then
				If Me._tblItem.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnItemIdChanging(value)
				Me.SendPropertyChanging
				Me._ItemId = value
				Me.SendPropertyChanged("ItemId")
				Me.OnItemIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IngId", DbType:="Int")>  _
	Public Property IngId() As System.Nullable(Of Integer)
		Get
			Return Me._IngId
		End Get
		Set
			If (Me._IngId.Equals(value) = false) Then
				If Me._tblIngredient.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIngIdChanging(value)
				Me.SendPropertyChanging
				Me._IngId = value
				Me.SendPropertyChanged("IngId")
				Me.OnIngIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblItem_tblItem_Ing", Storage:="_tblItem", ThisKey:="ItemId", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property tblItem() As tblItem
		Get
			Return Me._tblItem.Entity
		End Get
		Set
			Dim previousValue As tblItem = Me._tblItem.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblItem.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblItem.Entity = Nothing
					previousValue.tblItem_Ings.Remove(Me)
				End If
				Me._tblItem.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblItem_Ings.Add(Me)
					Me._ItemId = value.id
				Else
					Me._ItemId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblItem")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblIngredient_tblItem_Ing", Storage:="_tblIngredient", ThisKey:="IngId", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property tblIngredient() As tblIngredient
		Get
			Return Me._tblIngredient.Entity
		End Get
		Set
			Dim previousValue As tblIngredient = Me._tblIngredient.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblIngredient.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblIngredient.Entity = Nothing
					previousValue.tblItem_Ings.Remove(Me)
				End If
				Me._tblIngredient.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblItem_Ings.Add(Me)
					Me._IngId = value.id
				Else
					Me._IngId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblIngredient")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[tblOrder-Ing]")>  _
Partial Public Class tblOrder_Ing
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _orderId As System.Nullable(Of Integer)
	
	Private _ingId As System.Nullable(Of Integer)
	
	Private _with_without As System.Nullable(Of Boolean)
	
	Private _tblIngredient As EntityRef(Of tblIngredient)
	
	Private _tblOrder As EntityRef(Of tblOrder)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnorderIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnorderIdChanged()
    End Sub
    Partial Private Sub OningIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OningIdChanged()
    End Sub
    Partial Private Sub Onwith_withoutChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onwith_withoutChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblIngredient = CType(Nothing, EntityRef(Of tblIngredient))
		Me._tblOrder = CType(Nothing, EntityRef(Of tblOrder))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderId", DbType:="Int")>  _
	Public Property orderId() As System.Nullable(Of Integer)
		Get
			Return Me._orderId
		End Get
		Set
			If (Me._orderId.Equals(value) = false) Then
				If Me._tblOrder.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnorderIdChanging(value)
				Me.SendPropertyChanging
				Me._orderId = value
				Me.SendPropertyChanged("orderId")
				Me.OnorderIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ingId", DbType:="Int")>  _
	Public Property ingId() As System.Nullable(Of Integer)
		Get
			Return Me._ingId
		End Get
		Set
			If (Me._ingId.Equals(value) = false) Then
				If Me._tblIngredient.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OningIdChanging(value)
				Me.SendPropertyChanging
				Me._ingId = value
				Me.SendPropertyChanged("ingId")
				Me.OningIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[with/without]", Storage:="_with_without", DbType:="Bit")>  _
	Public Property with_without() As System.Nullable(Of Boolean)
		Get
			Return Me._with_without
		End Get
		Set
			If (Me._with_without.Equals(value) = false) Then
				Me.Onwith_withoutChanging(value)
				Me.SendPropertyChanging
				Me._with_without = value
				Me.SendPropertyChanged("with_without")
				Me.Onwith_withoutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblIngredient_tblOrder_Ing", Storage:="_tblIngredient", ThisKey:="ingId", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property tblIngredient() As tblIngredient
		Get
			Return Me._tblIngredient.Entity
		End Get
		Set
			Dim previousValue As tblIngredient = Me._tblIngredient.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblIngredient.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblIngredient.Entity = Nothing
					previousValue.tblOrder_Ings.Remove(Me)
				End If
				Me._tblIngredient.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblOrder_Ings.Add(Me)
					Me._ingId = value.id
				Else
					Me._ingId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblIngredient")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblOrder_tblOrder_Ing", Storage:="_tblOrder", ThisKey:="orderId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property tblOrder() As tblOrder
		Get
			Return Me._tblOrder.Entity
		End Get
		Set
			Dim previousValue As tblOrder = Me._tblOrder.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblOrder.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblOrder.Entity = Nothing
					previousValue.tblOrder_Ings.Remove(Me)
				End If
				Me._tblOrder.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblOrder_Ings.Add(Me)
					Me._orderId = value.Id
				Else
					Me._orderId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblOrder")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblInvoice")>  _
Partial Public Class tblInvoice
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _customerId As System.Nullable(Of Integer)
	
	Private _date_and_time As System.Nullable(Of Date)
	
	Private _open___close As System.Nullable(Of Boolean)
	
	Private _userId As System.Nullable(Of Integer)
	
	Private _tblCustomer As EntityRef(Of tblCustomer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OncustomerIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncustomerIdChanged()
    End Sub
    Partial Private Sub Ondate_and_timeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Ondate_and_timeChanged()
    End Sub
    Partial Private Sub Onopen___closeChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onopen___closeChanged()
    End Sub
    Partial Private Sub OnuserIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnuserIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblCustomer = CType(Nothing, EntityRef(Of tblCustomer))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customerId", DbType:="Int")>  _
	Public Property customerId() As System.Nullable(Of Integer)
		Get
			Return Me._customerId
		End Get
		Set
			If (Me._customerId.Equals(value) = false) Then
				If Me._tblCustomer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncustomerIdChanging(value)
				Me.SendPropertyChanging
				Me._customerId = value
				Me.SendPropertyChanged("customerId")
				Me.OncustomerIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[date and time]", Storage:="_date_and_time", DbType:="DateTime")>  _
	Public Property date_and_time() As System.Nullable(Of Date)
		Get
			Return Me._date_and_time
		End Get
		Set
			If (Me._date_and_time.Equals(value) = false) Then
				Me.Ondate_and_timeChanging(value)
				Me.SendPropertyChanging
				Me._date_and_time = value
				Me.SendPropertyChanged("date_and_time")
				Me.Ondate_and_timeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[open / close]", Storage:="_open___close", DbType:="Bit")>  _
	Public Property open___close() As System.Nullable(Of Boolean)
		Get
			Return Me._open___close
		End Get
		Set
			If (Me._open___close.Equals(value) = false) Then
				Me.Onopen___closeChanging(value)
				Me.SendPropertyChanging
				Me._open___close = value
				Me.SendPropertyChanged("open___close")
				Me.Onopen___closeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userId", DbType:="Int")>  _
	Public Property userId() As System.Nullable(Of Integer)
		Get
			Return Me._userId
		End Get
		Set
			If (Me._userId.Equals(value) = false) Then
				Me.OnuserIdChanging(value)
				Me.SendPropertyChanging
				Me._userId = value
				Me.SendPropertyChanged("userId")
				Me.OnuserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblCustomer_tblInvoice", Storage:="_tblCustomer", ThisKey:="customerId", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property tblCustomer() As tblCustomer
		Get
			Return Me._tblCustomer.Entity
		End Get
		Set
			Dim previousValue As tblCustomer = Me._tblCustomer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblCustomer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblCustomer.Entity = Nothing
					previousValue.tblInvoices.Remove(Me)
				End If
				Me._tblCustomer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblInvoices.Add(Me)
					Me._customerId = value.id
				Else
					Me._customerId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblCustomer")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblOrder")>  _
Partial Public Class tblOrder
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _quantity As System.Nullable(Of Integer)
	
	Private _discount As System.Nullable(Of Integer)
	
	Private _description As String
	
	Private _itemId As System.Nullable(Of Integer)
	
	Private _invoiceId As System.Nullable(Of Integer)
	
	Private _With As String
	
	Private _Without As String
	
	Private _tblOrder_Ings As EntitySet(Of tblOrder_Ing)
	
	Private _tblItem As EntityRef(Of tblItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnquantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnquantityChanged()
    End Sub
    Partial Private Sub OndiscountChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndiscountChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnitemIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnitemIdChanged()
    End Sub
    Partial Private Sub OninvoiceIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OninvoiceIdChanged()
    End Sub
    Partial Private Sub OnWithChanging(value As String)
    End Sub
    Partial Private Sub OnWithChanged()
    End Sub
    Partial Private Sub OnWithoutChanging(value As String)
    End Sub
    Partial Private Sub OnWithoutChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblOrder_Ings = New EntitySet(Of tblOrder_Ing)(AddressOf Me.attach_tblOrder_Ings, AddressOf Me.detach_tblOrder_Ings)
		Me._tblItem = CType(Nothing, EntityRef(Of tblItem))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Int")>  _
	Public Property quantity() As System.Nullable(Of Integer)
		Get
			Return Me._quantity
		End Get
		Set
			If (Me._quantity.Equals(value) = false) Then
				Me.OnquantityChanging(value)
				Me.SendPropertyChanging
				Me._quantity = value
				Me.SendPropertyChanged("quantity")
				Me.OnquantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discount", DbType:="Int")>  _
	Public Property discount() As System.Nullable(Of Integer)
		Get
			Return Me._discount
		End Get
		Set
			If (Me._discount.Equals(value) = false) Then
				Me.OndiscountChanging(value)
				Me.SendPropertyChanging
				Me._discount = value
				Me.SendPropertyChanged("discount")
				Me.OndiscountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(50)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemId", DbType:="Int")>  _
	Public Property itemId() As System.Nullable(Of Integer)
		Get
			Return Me._itemId
		End Get
		Set
			If (Me._itemId.Equals(value) = false) Then
				If Me._tblItem.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnitemIdChanging(value)
				Me.SendPropertyChanging
				Me._itemId = value
				Me.SendPropertyChanged("itemId")
				Me.OnitemIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_invoiceId", DbType:="Int")>  _
	Public Property invoiceId() As System.Nullable(Of Integer)
		Get
			Return Me._invoiceId
		End Get
		Set
			If (Me._invoiceId.Equals(value) = false) Then
				Me.OninvoiceIdChanging(value)
				Me.SendPropertyChanging
				Me._invoiceId = value
				Me.SendPropertyChanged("invoiceId")
				Me.OninvoiceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_With", DbType:="NVarChar(10)")>  _
	Public Property [With]() As String
		Get
			Return Me._With
		End Get
		Set
			If (String.Equals(Me._With, value) = false) Then
				Me.OnWithChanging(value)
				Me.SendPropertyChanging
				Me._With = value
				Me.SendPropertyChanged("[With]")
				Me.OnWithChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Without", DbType:="NVarChar(10)")>  _
	Public Property Without() As String
		Get
			Return Me._Without
		End Get
		Set
			If (String.Equals(Me._Without, value) = false) Then
				Me.OnWithoutChanging(value)
				Me.SendPropertyChanging
				Me._Without = value
				Me.SendPropertyChanged("Without")
				Me.OnWithoutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblOrder_tblOrder_Ing", Storage:="_tblOrder_Ings", ThisKey:="Id", OtherKey:="orderId")>  _
	Public Property tblOrder_Ings() As EntitySet(Of tblOrder_Ing)
		Get
			Return Me._tblOrder_Ings
		End Get
		Set
			Me._tblOrder_Ings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblItem_tblOrder", Storage:="_tblItem", ThisKey:="itemId", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property tblItem() As tblItem
		Get
			Return Me._tblItem.Entity
		End Get
		Set
			Dim previousValue As tblItem = Me._tblItem.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblItem.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblItem.Entity = Nothing
					previousValue.tblOrders.Remove(Me)
				End If
				Me._tblItem.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblOrders.Add(Me)
					Me._itemId = value.id
				Else
					Me._itemId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblItem")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblOrder_Ings(ByVal entity As tblOrder_Ing)
		Me.SendPropertyChanging
		entity.tblOrder = Me
	End Sub
	
	Private Sub detach_tblOrder_Ings(ByVal entity As tblOrder_Ing)
		Me.SendPropertyChanging
		entity.tblOrder = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.View_orderItem")>  _
Partial Public Class View_orderItem
	
	Private _Id As Integer
	
	Private _quantity As System.Nullable(Of Integer)
	
	Private _discount As System.Nullable(Of Integer)
	
	Private _description As String
	
	Private _itemId As System.Nullable(Of Integer)
	
	Private _invoiceId As System.Nullable(Of Integer)
	
	Private _ItemName As String
	
	Private _Price As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Int")>  _
	Public Property quantity() As System.Nullable(Of Integer)
		Get
			Return Me._quantity
		End Get
		Set
			If (Me._quantity.Equals(value) = false) Then
				Me._quantity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discount", DbType:="Int")>  _
	Public Property discount() As System.Nullable(Of Integer)
		Get
			Return Me._discount
		End Get
		Set
			If (Me._discount.Equals(value) = false) Then
				Me._discount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(50)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemId", DbType:="Int")>  _
	Public Property itemId() As System.Nullable(Of Integer)
		Get
			Return Me._itemId
		End Get
		Set
			If (Me._itemId.Equals(value) = false) Then
				Me._itemId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_invoiceId", DbType:="Int")>  _
	Public Property invoiceId() As System.Nullable(Of Integer)
		Get
			Return Me._invoiceId
		End Get
		Set
			If (Me._invoiceId.Equals(value) = false) Then
				Me._invoiceId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemName", DbType:="NVarChar(50)")>  _
	Public Property ItemName() As String
		Get
			Return Me._ItemName
		End Get
		Set
			If (String.Equals(Me._ItemName, value) = false) Then
				Me._ItemName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Int")>  _
	Public Property Price() As System.Nullable(Of Integer)
		Get
			Return Me._Price
		End Get
		Set
			If (Me._Price.Equals(value) = false) Then
				Me._Price = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.View_OrderInvoiceItem")>  _
Partial Public Class View_OrderInvoiceItem
	
	Private _open___close As System.Nullable(Of Boolean)
	
	Private _IDinvoice As Integer
	
	Private _IDorder As Integer
	
	Private _quantity As System.Nullable(Of Integer)
	
	Private _discount As System.Nullable(Of Integer)
	
	Private _ItemName As String
	
	Private _IDitem As Integer
	
	Private _Price As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[open / close]", Storage:="_open___close", DbType:="Bit")>  _
	Public Property open___close() As System.Nullable(Of Boolean)
		Get
			Return Me._open___close
		End Get
		Set
			If (Me._open___close.Equals(value) = false) Then
				Me._open___close = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDinvoice", DbType:="Int NOT NULL")>  _
	Public Property IDinvoice() As Integer
		Get
			Return Me._IDinvoice
		End Get
		Set
			If ((Me._IDinvoice = value)  _
						= false) Then
				Me._IDinvoice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDorder", DbType:="Int NOT NULL")>  _
	Public Property IDorder() As Integer
		Get
			Return Me._IDorder
		End Get
		Set
			If ((Me._IDorder = value)  _
						= false) Then
				Me._IDorder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Int")>  _
	Public Property quantity() As System.Nullable(Of Integer)
		Get
			Return Me._quantity
		End Get
		Set
			If (Me._quantity.Equals(value) = false) Then
				Me._quantity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discount", DbType:="Int")>  _
	Public Property discount() As System.Nullable(Of Integer)
		Get
			Return Me._discount
		End Get
		Set
			If (Me._discount.Equals(value) = false) Then
				Me._discount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemName", DbType:="NVarChar(50)")>  _
	Public Property ItemName() As String
		Get
			Return Me._ItemName
		End Get
		Set
			If (String.Equals(Me._ItemName, value) = false) Then
				Me._ItemName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDitem", DbType:="Int NOT NULL")>  _
	Public Property IDitem() As Integer
		Get
			Return Me._IDitem
		End Get
		Set
			If ((Me._IDitem = value)  _
						= false) Then
				Me._IDitem = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Int")>  _
	Public Property Price() As System.Nullable(Of Integer)
		Get
			Return Me._Price
		End Get
		Set
			If (Me._Price.Equals(value) = false) Then
				Me._Price = value
			End If
		End Set
	End Property
End Class

Partial Public Class Filter_CustomerResult
	
	Private _id As Integer
	
	Private _Customer As String
	
	Private _Address As String
	
	Private _Phone As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="Int NOT NULL")>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me._id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="NVarChar(50)")>  _
	Public Property Customer() As String
		Get
			Return Me._Customer
		End Get
		Set
			If (String.Equals(Me._Customer, value) = false) Then
				Me._Customer = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(50)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me._Address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me._Phone = value
			End If
		End Set
	End Property
End Class

Partial Public Class Filter_UserResult
	
	Private _id As Integer
	
	Private _Name As String
	
	Private _Password As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="Int NOT NULL")>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me._id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NVarChar(50)")>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me._Password = value
			End If
		End Set
	End Property
End Class

Partial Public Class Filter_itemResult
	
	Private _id As Integer
	
	Private _ItemName As String
	
	Private _CategoryId As System.Nullable(Of Integer)
	
	Private _Price As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="Int NOT NULL")>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me._id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemName", DbType:="NVarChar(50)")>  _
	Public Property ItemName() As String
		Get
			Return Me._ItemName
		End Get
		Set
			If (String.Equals(Me._ItemName, value) = false) Then
				Me._ItemName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryId", DbType:="Int")>  _
	Public Property CategoryId() As System.Nullable(Of Integer)
		Get
			Return Me._CategoryId
		End Get
		Set
			If (Me._CategoryId.Equals(value) = false) Then
				Me._CategoryId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Int")>  _
	Public Property Price() As System.Nullable(Of Integer)
		Get
			Return Me._Price
		End Get
		Set
			If (Me._Price.Equals(value) = false) Then
				Me._Price = value
			End If
		End Set
	End Property
End Class

Partial Public Class Filter_itemIngResult
	
	Private _id As Integer
	
	Private _ItemId As System.Nullable(Of Integer)
	
	Private _IngId As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="Int NOT NULL")>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me._id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemId", DbType:="Int")>  _
	Public Property ItemId() As System.Nullable(Of Integer)
		Get
			Return Me._ItemId
		End Get
		Set
			If (Me._ItemId.Equals(value) = false) Then
				Me._ItemId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IngId", DbType:="Int")>  _
	Public Property IngId() As System.Nullable(Of Integer)
		Get
			Return Me._IngId
		End Get
		Set
			If (Me._IngId.Equals(value) = false) Then
				Me._IngId = value
			End If
		End Set
	End Property
End Class

Partial Public Class Filter_ReprotIemOrderResult
	
	Private _open___close As System.Nullable(Of Boolean)
	
	Private _IDinvoice As Integer
	
	Private _IDorder As Integer
	
	Private _quantity As System.Nullable(Of Integer)
	
	Private _discount As System.Nullable(Of Integer)
	
	Private _ItemName As String
	
	Private _IDitem As Integer
	
	Private _Price As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[open / close]", Storage:="_open___close", DbType:="Bit")>  _
	Public Property open___close() As System.Nullable(Of Boolean)
		Get
			Return Me._open___close
		End Get
		Set
			If (Me._open___close.Equals(value) = false) Then
				Me._open___close = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDinvoice", DbType:="Int NOT NULL")>  _
	Public Property IDinvoice() As Integer
		Get
			Return Me._IDinvoice
		End Get
		Set
			If ((Me._IDinvoice = value)  _
						= false) Then
				Me._IDinvoice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDorder", DbType:="Int NOT NULL")>  _
	Public Property IDorder() As Integer
		Get
			Return Me._IDorder
		End Get
		Set
			If ((Me._IDorder = value)  _
						= false) Then
				Me._IDorder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Int")>  _
	Public Property quantity() As System.Nullable(Of Integer)
		Get
			Return Me._quantity
		End Get
		Set
			If (Me._quantity.Equals(value) = false) Then
				Me._quantity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discount", DbType:="Int")>  _
	Public Property discount() As System.Nullable(Of Integer)
		Get
			Return Me._discount
		End Get
		Set
			If (Me._discount.Equals(value) = false) Then
				Me._discount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemName", DbType:="NVarChar(50)")>  _
	Public Property ItemName() As String
		Get
			Return Me._ItemName
		End Get
		Set
			If (String.Equals(Me._ItemName, value) = false) Then
				Me._ItemName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDitem", DbType:="Int NOT NULL")>  _
	Public Property IDitem() As Integer
		Get
			Return Me._IDitem
		End Get
		Set
			If ((Me._IDitem = value)  _
						= false) Then
				Me._IDitem = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Int")>  _
	Public Property Price() As System.Nullable(Of Integer)
		Get
			Return Me._Price
		End Get
		Set
			If (Me._Price.Equals(value) = false) Then
				Me._Price = value
			End If
		End Set
	End Property
End Class
